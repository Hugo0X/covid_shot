{% extends 'layouts/base.html.twig' %}

{% block title 'Information sur les vaccins | TPLV' %}

{% block body %}
       
	<div class="mt-5 row text-center">
		<div class="col-md-6">
			<div class="counter py-3 rounded">
				<i class="h2 fas fa-syringe text-primary"></i>
				<h2 class="mt-2 mb-0 timer count-title count-number" data-to="{{ firstDose }}" data-speed="1500"></h2>
				<p class="mt-1 h5 text-secondary">Personne vaccinées</p>
			</div>
		</div>

		<div class="col-md-6">
			<div class="counter py-3 rounded">
				<i class="h2 fas fa-syringe text-primary"></i>
				<i class="h2 fas fa-syringe text-primary"></i>
				<h2 class="mt-2 mb-0 timer count-title count-number" data-to="{{ secondDose }}" data-speed="1500"></h2>
				<p class="mt-1 h5 text-secondary">Personne vaccinées 2 doses</p>
			</div>
		</div>
	</div>

   	<h2 class="mt-4 h4 font-weight-bold">Les vaccins autorisés en France</h2>
    <p>La seule façon de mettre un terme à cette pandémie est la vaccination, le gouvernement prévois que tous les Français qui le souhaitent soit vaccinés d'ici début septembre, en attendant continuons d'appliquer les gestes barrières et de porter le masque.</p>
	<p> Du moins à ce jour, {{ vaccineName|length}} vaccins sont utilisés en France : </p>
    <ul>
		{% for name in vaccineName %}
        	<li>{{ name }}</li>
		{% endfor %}
    </ul>
    <p>Les trois derniers vaccins s’administrent en deux doses.</p> 

	<div id="div_chart" class="mt-4 mb-3 shadow lol" style="width: 100%; height: max(30vw, 400px)"></div>

    <h2 class="mt-4 h4 font-weight-bold">Suis-je éligible à la vaccination ?</h2>

	<div class="mt-3 mb-5" id="iframeEligibily">
		<iframe style="border:none; height: max(30vw, 400px)" class="w-100" src="https://view.genial.ly/605c614483999c0d91141db6" type="text/html" allowscriptaccess="always" allowfullscreen="true" allownetworking="all" allowpaymentrequest="false"></iframe>
	</div>

{# -- chart #}
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        {{ gc_draw(chart, 'div_chart') }}
    </script>

	<script>
		setTimeout(function() {
			var texts = document.querySelector('#div_chart').querySelectorAll('text');
			console.log(texts);
			for (var i=0; i<texts.length; i+=1) {
				var text = texts[i];
				if (text.textContent.trim() == "Doses de vaccins administrés par jour") {
					text.setAttribute("text-anchor", "middle");
					text.setAttribute("x", "50%");
					break;
				}
			};
		}, 2750);
	</script>
{# chart -- #}

{# -- counter #}
	<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
	<script src="https://kit.fontawesome.com/b9076ef6be.js" crossorigin="anonymous"></script>   

    <script>
        (function ($) {
	$.fn.countTo = function (options) {
		options = options || {};
		
		return $(this).each(function () {
			// set options for current element
			var settings = $.extend({}, $.fn.countTo.defaults, {
				from:            $(this).data('from'),
				to:              $(this).data('to'),
				speed:           $(this).data('speed'),
				refreshInterval: $(this).data('refresh-interval'),
				decimals:        $(this).data('decimals')
			}, options);
			
			// how many times to update the value, and how much to increment the value on each update
			var loops = Math.ceil(settings.speed / settings.refreshInterval),
				increment = (settings.to - settings.from) / loops;
			
			// references & variables that will change with each update
			var self = this,
				$self = $(this),
				loopCount = 0,
				value = settings.from,
				data = $self.data('countTo') || {};
			
			$self.data('countTo', data);
			
			// if an existing interval can be found, clear it first
			if (data.interval) {
				clearInterval(data.interval);
			}
			data.interval = setInterval(updateTimer, settings.refreshInterval);
			
			// initialize the element with the starting value
			render(value);
			
			function updateTimer() {
				value += increment;
				loopCount++;
				
				render(value);
				
				if (typeof(settings.onUpdate) == 'function') {
					settings.onUpdate.call(self, value);
				}
				
				if (loopCount >= loops) {
					// remove the interval
					$self.removeData('countTo');
					clearInterval(data.interval);
					value = settings.to;
					
					if (typeof(settings.onComplete) == 'function') {
						settings.onComplete.call(self, value);
					}
				}
			}
			
			function render(value) {
				var formattedValue = settings.formatter.call(self, value, settings);
				$self.html(formattedValue);
			}
		});
	};
	
	$.fn.countTo.defaults = {
		from: 0,               // the number the element should start at
		to: 0,                 // the number the element should end at
		speed: 1000,           // how long it should take to count between the target numbers
		refreshInterval: 100,  // how often the element should be updated
		decimals: 0,           // the number of decimal places to show
		formatter: formatter,  // handler for formatting the value before rendering
		onUpdate: null,        // callback method for every time the element is updated
		onComplete: null       // callback method for when the element finishes updating
	};
	
	function formatter(value, settings) {
		return value.toFixed(settings.decimals);
	}
	}(jQuery));

	jQuery(function ($) {
	// custom formatting example
	$('.count-number').data('countToOptions', {
		formatter: function (value, options) {
		return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
		}
	});
	
	// start all the timers
	$('.timer').each(count);  
	
	function count(options) {
		var $this = $(this);
		options = $.extend({}, options || {}, $this.data('countToOptions') || {});
		$this.countTo(options);
	}
	});
	</script>
{# counter -- #}

{% endblock %}
